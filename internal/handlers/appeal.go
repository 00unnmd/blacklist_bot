package handlers

import (
	"blacklist_bot/internal/models"
	"fmt"
	"gopkg.in/telebot.v3"
	"strings"
)

func (h *BotHandler) addAppealHandler(c telebot.Context) error {
	markup := &telebot.ReplyMarkup{}
	btnCancel := markup.Data("‚ìÇÔ∏è –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", "main_menu")
	markup.Inline(markup.Row(btnCancel))

	err := c.Send("üìù –ù–∞–ø–∏—à–∏—Ç–µ —Ç–µ–∫—Å—Ç –æ–±—Ä–∞—â–µ–Ω–∏—è", markup)
	if err != nil {
		return err
	}

	h.bot.Handle(telebot.OnText, func(ctx telebot.Context) error {
		btnRepeat := markup.Data("üìù –û—Å—Ç–∞–≤–∏—Ç—å –æ–±—Ä–∞—â–µ–Ω–∏–µ", "add_appeal")
		markup.Inline(markup.Row(btnCancel, btnRepeat))

		if len(ctx.Text()) < 1 {
			ctx.Send("‚ùå –û—à–∏–±–∫–∞: –ø—É—Å—Ç–æ–π —Ç–µ–∫—Å—Ç –æ–±—Ä–∞—â–µ–Ω–∏—è.", markup)
		}

		appeal := models.Appeal{
			Question:   ctx.Text(),
			Initiator:  ctx.Sender().Username,
			IsAnswered: false,
		}

		if err := h.db.AddAppeal(appeal); err != nil {
			return ctx.Send("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –æ–±—Ä–∞—â–µ–Ω–∏—è: "+err.Error(), markup)
		}

		return ctx.Send("‚úÖ –û–±—Ä–∞—â–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–æ!", markup)
	})

	return nil
}

func (h *BotHandler) listAppealsHandler(c telebot.Context) error {
	markup := &telebot.ReplyMarkup{}
	btnCancel := markup.Data("‚ìÇÔ∏è –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", "main_menu")
	markup.Inline(markup.Row(btnCancel))

	appeals, err := h.db.GetUnansweredAppeals()
	if err != nil {
		return c.Send("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ –æ–±—Ä–∞—â–µ–Ω–∏–π: "+err.Error(), markup)
	}

	if len(appeals) == 0 {
		return c.Send("–ù–µ—Ç –Ω–µ–æ—Ç–≤–µ—á–µ–Ω–Ω—ã—Ö –æ–±—Ä–∞—â–µ–Ω–∏–π", markup)
	}

	var builder strings.Builder
	builder.WriteString("üìã –°–ø–∏—Å–æ–∫ –æ–±—Ä–∞—â–µ–Ω–∏–π \n\n")

	for _, appeal := range appeals {
		builder.WriteString(fmt.Sprintf(
			"–û–±—Ä–∞—â–µ–Ω–∏–µ: ‚Ññ%d \n"+
				"–ò–Ω–∏—Ü–∏–∞—Ç–æ—Ä: @%s \n"+
				"–í–æ–ø—Ä–æ—Å: %s \n\n",
			appeal.ID,
			appeal.Initiator,
			appeal.Question,
		))
	}

	err = c.Send(builder.String(), markup, telebot.ModeHTML)
	if err != nil {
		return err
	}

	return nil
}
