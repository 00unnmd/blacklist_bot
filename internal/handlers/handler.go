package handlers

import (
	"blacklist_bot/internal/database"
	"blacklist_bot/internal/models"
	"blacklist_bot/utils"
	"gopkg.in/telebot.v3"
	"strings"
)

type BotHandler struct {
	bot        *telebot.Bot
	db         *database.Database
	bannedUser models.BannedUser
	tracker    *utils.MessageTracker
}

func New(bot *telebot.Bot, db *database.Database) *BotHandler {
	return &BotHandler{
		bot:        bot,
		db:         db,
		bannedUser: models.BannedUser{},
		tracker:    utils.NewMessageTracker(),
	}
}

func (h *BotHandler) SetupHandlers() {
	h.bot.Use(h.tracker.TrackMessages())
	h.bot.Handle("/start", h.showStart)
	h.bot.Handle("/about", h.showAbout)
	h.bot.Handle("/stop", h.showStop)

	h.bot.Handle(telebot.OnText, func(c telebot.Context) error {
		startMsg := "üöÄ –í—ã–±–µ—Ä–∏—Ç–µ /start —á—Ç–æ–±—ã –æ—Ç–∫—Ä—ã—Ç—å –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.\n\nü§ñ –í—ã–±–µ—Ä–∏—Ç–µ /about —á—Ç–æ–±—ã –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –±–æ—Ç–µ."
		return h.SendAndTrack(c.Recipient(), c.Chat().ID, startMsg, &telebot.SendOptions{ParseMode: telebot.ModeHTML})
	})

	h.bot.Handle(telebot.OnCallback, func(c telebot.Context) error {
		// for some reason c.Callback().Data str starts with \n separator
		data := strings.TrimSpace(c.Callback().Data)
		switch data {
		case "add_user_phone_number":
			return h.addUserPhoneNumber(c)
		case "add_user_full_name":
			return h.addUserFullName(c)
		case "add_user_description":
			return h.addUserDescription(c)
		case "add_user_birthday":
			return h.addUserBirthday(c)
		case "add_user_city":
			return h.addUserCity(c)
		case "add_user_school_format":
			return h.addUserSchoolFormat(c)
		case "add_user_confirmation":
			return h.addUserConfirmation(c)
		case "save_user":
			return h.saveBannedUser(c)
		case "find_user":
			return h.findUserHandler(c)
		case "add_appeal":
			return h.addAppealHandler(c)
		case "main_menu":
			return h.showStart(c)
		default:
			return h.showStart(c)
		}

		return nil
	})
}

// SendAndTrack added for tracking bot messages (user messages tracked with TrackMessages)
func (h *BotHandler) SendAndTrack(to telebot.Recipient, chatId int64, text string, options ...interface{}) error {
	msg, err := h.bot.Send(to, text, options...)
	if err == nil {
		h.tracker.TrackMessage(chatId, msg.ID)
	}
	return err
}

func (h *BotHandler) EditBotMessage(chatId int64, what interface{}, opts ...interface{}) error {
	msgID, err := h.tracker.GetLastBotMessageId(chatId)
	if err != nil {
		return err
	}

	_, err = h.bot.Edit(&telebot.Message{
		Chat: &telebot.Chat{ID: chatId},
		ID:   msgID,
	}, what, opts...)

	return err
}

func (h *BotHandler) showStart(c telebot.Context) error {
	h.tracker.ClearChatHistory(h.bot, c.Chat().ID)

	h.bannedUser = models.BannedUser{}
	markup := &telebot.ReplyMarkup{}
	btnAddUser := markup.Data("‚ûï –î–æ–±–∞–≤–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è", "add_user_phone_number")
	btnFindUser := markup.Data("üîç –ù–∞–π—Ç–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è", "find_user")
	btnAddAppeal := markup.Data("üìù –û—Å—Ç–∞–≤–∏—Ç—å –æ–±—Ä–∞—â–µ–Ω–∏–µ", "add_appeal")

	markup.Inline(
		markup.Row(btnAddUser, btnFindUser),
		markup.Row(btnAddAppeal),
	)

	h.bot.Handle(telebot.OnText, func(ctx telebot.Context) error {
		h.tracker.ClearChatHistory(h.bot, c.Chat().ID)
		return h.SendAndTrack(c.Recipient(), c.Chat().ID, "‚ìÇÔ∏è –í—ã–±–µ—Ä–∏—Ç–µ –ø—É–Ω–∫—Ç –∏–∑ –º–µ–Ω—é", markup)
	})

	return h.SendAndTrack(c.Recipient(), c.Chat().ID, "‚ìÇÔ∏è –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", markup)
}

func (h *BotHandler) showAbout(c telebot.Context) error {
	aboutMsg := "üëã <b>–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å!</b>\n\n" +
		"–≠—Ç–æ—Ç –±–æ—Ç –ø–æ–∑–≤–æ–ª—è–µ—Ç —Ä–∞–±–æ—Ç–∞—Ç—å —Å —á–µ—Ä–Ω—ã–º —Å–ø–∏—Å–∫–æ–º –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª–µ–π.\n\n" +
		"–û—Å–Ω–æ–≤–Ω—ã–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏:\n" +
		"‚Ä¢ –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª–µ–π –≤ –ß–°\n" +
		"‚Ä¢ –ü–æ–∏—Å–∫ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª–µ–π –ø–æ –±–∞–∑–µ\n" +
		"‚Ä¢ –í–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –æ—Å—Ç–∞–≤–∏—Ç—å –æ–±—Ä–∞—â–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É\n\n" +
		"üöÄ –í—ã–±–µ—Ä–∏—Ç–µ /start —á—Ç–æ–±—ã –æ—Ç–∫—Ä—ã—Ç—å –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é."

	return h.SendAndTrack(c.Recipient(), c.Chat().ID, aboutMsg, &telebot.SendOptions{ParseMode: telebot.ModeHTML})
}

func (h *BotHandler) showStop(c telebot.Context) error {
	h.tracker.ClearChatHistory(h.bot, c.Chat().ID)
	h.bot.Handle(telebot.OnText, func(c telebot.Context) error {
		startMsg := "üöÄ –í—ã–±–µ—Ä–∏—Ç–µ /start —á—Ç–æ–±—ã –æ—Ç–∫—Ä—ã—Ç—å –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.\n\nü§ñ –í—ã–±–µ—Ä–∏—Ç–µ /about —á—Ç–æ–±—ã –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –±–æ—Ç–µ."
		return h.SendAndTrack(c.Recipient(), c.Chat().ID, startMsg, &telebot.SendOptions{ParseMode: telebot.ModeHTML})
	})

	stopMsg := "üõë –†–∞–±–æ—Ç–∞ —Å –±–æ—Ç–æ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∞.\n\nüöÄ –ß—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å —Å–Ω–æ–≤–∞, –≤—ã–±–µ—Ä–∏—Ç–µ /start."
	return h.SendAndTrack(c.Recipient(), c.Chat().ID, stopMsg)
}
