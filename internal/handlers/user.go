package handlers

import (
	"blacklist_bot/internal/models"
	"blacklist_bot/utils/validation"
	"fmt"
	"gopkg.in/telebot.v3"
	"strings"
)

func (h *BotHandler) addUserPhoneNumber(c telebot.Context) error {
	markup := &telebot.ReplyMarkup{}
	btnCancel := markup.Data("‚ìÇÔ∏è –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", "main_menu")
	markup.Inline(markup.Row(btnCancel))
	h.bannedUser.PhoneNumber = ""

	err := h.EditBotMessage(c.Chat().ID, "‚ûï –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è \n –®–∞–≥ 1. –í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞", markup)
	if err != nil {
		return err
	}

	h.bot.Handle(telebot.OnText, func(ctx telebot.Context) error {
		normalizedPhone, err := validation.ValidateAndNormalizePhone(ctx.Text())
		if err != nil {
			errMsg := fmt.Sprintf("‚ùå –û—à–∏–±–∫–∞: %s\n–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –µ—â–µ —Ä–∞–∑.", err)
			return h.SendAndTrack(ctx.Recipient(), ctx.Chat().ID, errMsg)
		}

		h.bannedUser.PhoneNumber = normalizedPhone
		return h.addUserFullName(c)
	})

	return nil
}

func (h *BotHandler) addUserFullName(c telebot.Context) error {
	markup := &telebot.ReplyMarkup{}
	btnCancel := markup.Data("‚ìÇÔ∏è –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", "main_menu")
	btnPrev := markup.Data("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", "add_user_phone_number")
	markup.Inline(markup.Row(btnCancel, btnPrev))
	h.bannedUser.FullName = ""

	err := h.SendAndTrack(c.Recipient(), c.Chat().ID, "‚ûï –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è \n –®–∞–≥ 2. –í–≤–µ–¥–∏—Ç–µ –§–ò–û", markup)
	if err != nil {
		return err
	}

	h.bot.Handle(telebot.OnText, func(ctx telebot.Context) error {
		err := validation.ValidateDescriptionStr(ctx.Text())
		if err != nil {
			errMsg := fmt.Sprintf("‚ùå –û—à–∏–±–∫–∞: %s\n–í–≤–µ–¥–∏—Ç–µ –§–ò–û –µ—â–µ —Ä–∞–∑.", err)
			return h.SendAndTrack(ctx.Recipient(), ctx.Chat().ID, errMsg)
		}

		h.bannedUser.FullName = ctx.Text()
		return h.addUserDescription(c)
	})

	return nil
}

func (h *BotHandler) addUserDescription(c telebot.Context) error {
	markup := &telebot.ReplyMarkup{}
	btnCancel := markup.Data("‚ìÇÔ∏è –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", "main_menu")
	btnPrev := markup.Data("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", "add_user_full_name")
	markup.Inline(markup.Row(btnCancel, btnPrev))
	h.bannedUser.Description = ""

	err := h.SendAndTrack(c.Recipient(), c.Chat().ID, "‚ûï –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è \n –®–∞–≥ 3. –í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ", markup)
	if err != nil {
		return err
	}

	h.bot.Handle(telebot.OnText, func(ctx telebot.Context) error {
		err := validation.ValidateDescriptionStr(ctx.Text())
		if err != nil {
			errMsg := fmt.Sprintf("‚ùå –û—à–∏–±–∫–∞: %s\n–í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ –µ—â–µ —Ä–∞–∑.", err)
			return h.SendAndTrack(ctx.Recipient(), ctx.Chat().ID, errMsg)
		}

		h.bannedUser.Description = ctx.Text()
		return h.addUserBirthday(c)
	})

	return nil
}

func (h *BotHandler) addUserBirthday(c telebot.Context) error {
	markup := &telebot.ReplyMarkup{}
	btnCancel := markup.Data("‚ìÇÔ∏è –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", "main_menu")
	btnPrev := markup.Data("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", "add_user_description")
	btnSkip := markup.Data("‚û°Ô∏è –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å", "add_user_city")
	markup.Inline(markup.Row(btnCancel, btnPrev, btnSkip))
	h.bannedUser.BirthDay = ""

	err := h.SendAndTrack(c.Recipient(), c.Chat().ID, "‚ûï –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è \n –®–∞–≥ 4. –í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É —Ä–æ–∂–¥–µ–Ω–∏—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ 01.01.2000", markup)
	if err != nil {
		return err
	}

	h.bot.Handle(telebot.OnText, func(ctx telebot.Context) error {
		err := validation.ValidateBirthdayStr(ctx.Text())
		if err != nil {
			errMsg := fmt.Sprintf("‚ùå –û—à–∏–±–∫–∞: %s\n–í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É —Ä–æ–∂–¥–µ–Ω–∏—è –µ—â–µ —Ä–∞–∑.", err)
			return h.SendAndTrack(ctx.Recipient(), ctx.Chat().ID, errMsg)
		}

		h.bannedUser.BirthDay = ctx.Text()
		return h.addUserCity(c)
	})

	return nil
}

func (h *BotHandler) addUserCity(c telebot.Context) error {
	markup := &telebot.ReplyMarkup{}
	btnCancel := markup.Data("‚ìÇÔ∏è –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", "main_menu")
	btnPrev := markup.Data("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", "add_user_birthday")
	btnSkip := markup.Data("‚û°Ô∏è –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å", "add_user_school_format")
	markup.Inline(markup.Row(btnCancel, btnPrev, btnSkip))
	h.bannedUser.City = ""

	err := h.SendAndTrack(c.Recipient(), c.Chat().ID, "‚ûï –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è \n –®–∞–≥ 5. –í–≤–µ–¥–∏—Ç–µ –≥–æ—Ä–æ–¥", markup)
	if err != nil {
		return err
	}

	h.bot.Handle(telebot.OnText, func(ctx telebot.Context) error {
		err := validation.ValidateCityStr(ctx.Text())
		if err != nil {
			errMsg := fmt.Sprintf("‚ùå –û—à–∏–±–∫–∞: %s\n–í–≤–µ–¥–∏—Ç–µ –≥–æ—Ä–æ–¥ –µ—â–µ —Ä–∞–∑.", err)
			return h.SendAndTrack(ctx.Recipient(), ctx.Chat().ID, errMsg)
		}

		h.bannedUser.City = ctx.Text()
		return h.addUserSchoolFormat(c)
	})

	return nil
}

func (h *BotHandler) addUserSchoolFormat(c telebot.Context) error {
	markup := &telebot.ReplyMarkup{}
	btnOfflineFormat := markup.Data("üè´ –û—Ñ—Ñ–ª–∞–π–Ω", "school_offline")
	btnOnlineFormat := markup.Data("üåê –û–Ω–ª–∞–π–Ω", "school_online")
	btnCancel := markup.Data("‚ìÇÔ∏è –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", "main_menu")
	btnPrev := markup.Data("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", "add_user_city")
	btnSkip := markup.Data("‚û°Ô∏è –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å", "add_user_confirmation")
	markup.Inline(
		markup.Row(btnOfflineFormat, btnOnlineFormat),
		markup.Row(btnCancel, btnPrev, btnSkip),
	)
	h.bannedUser.SchoolFormat = ""

	err := h.SendAndTrack(c.Recipient(), c.Chat().ID, "‚ûï –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è \n –®–∞–≥ 6. –í—ã–±–µ—Ä–∏—Ç–µ —Ñ–æ—Ä–º–∞—Ç —à–∫–æ–ª—ã (–û—Ñ—Ñ–ª–∞–π–Ω/–û–Ω–ª–∞–π–Ω)", markup)
	if err != nil {
		return err
	}

	h.bot.Handle(&btnOfflineFormat, func(ctx telebot.Context) error {
		h.bannedUser.SchoolFormat = "–û—Ñ—Ñ–ª–∞–π–Ω"
		return h.addUserConfirmation(ctx)
	})

	h.bot.Handle(&btnOnlineFormat, func(ctx telebot.Context) error {
		h.bannedUser.SchoolFormat = "–û–Ω–ª–∞–π–Ω"
		return h.addUserConfirmation(ctx)
	})

	h.bot.Handle(telebot.OnText, func(ctx telebot.Context) error {
		err := h.SendAndTrack(ctx.Recipient(), ctx.Chat().ID, "‚ùå –û—à–∏–±–∫–∞: —Ñ–æ—Ä–º–∞—Ç —à–∫–æ–ª—ã –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –≤—ã–±—Ä–∞—Ç—å.")
		if err != nil {
			return err
		}

		return h.addUserSchoolFormat(c)
	})

	return nil
}

func (h *BotHandler) addUserConfirmation(c telebot.Context) error {
	markup := &telebot.ReplyMarkup{}
	btnCancel := markup.Data("‚ìÇÔ∏è –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", "main_menu")
	btnConfirm := markup.Data("‚úÖ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å", "save_user")
	markup.Inline(markup.Row(btnCancel, btnConfirm))

	strF := fmt.Sprintf("‚ûï –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è \n"+
		"–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –∏ –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ. \n"+
		"–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞: +%s \n"+
		"–§–ò–û: %s \n"+
		"–û–ø–∏—Å–∞–Ω–∏–µ: %s \n"+
		"–î–∞—Ç–∞ —Ä–æ–∂–¥–µ–Ω–∏—è: %s \n"+
		"–ì–æ—Ä–æ–¥: %s \n"+
		"–§–æ—Ä–º–∞—Ç —à–∫–æ–ª—ã: %s \n",
		h.bannedUser.PhoneNumber, h.bannedUser.FullName, h.bannedUser.Description, h.bannedUser.BirthDay, h.bannedUser.City, h.bannedUser.SchoolFormat)
	err := h.SendAndTrack(c.Recipient(), c.Chat().ID, strF, markup)
	if err != nil {
		return err
	}

	return nil
}

func (h *BotHandler) saveBannedUser(c telebot.Context) error {
	markup := &telebot.ReplyMarkup{}
	btnCancel := markup.Data("‚ìÇÔ∏è –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", "main_menu")
	btnRepeat := markup.Data("‚ûï –î–æ–±–∞–≤–∏—Ç—å –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è", "add_user_phone_number")
	markup.Inline(markup.Row(btnCancel, btnRepeat))

	if err := h.db.AddBannedUser(h.bannedUser); err != nil {
		return h.SendAndTrack(c.Recipient(), c.Chat().ID, "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è: "+err.Error(), markup)
	}

	return h.SendAndTrack(c.Recipient(), c.Chat().ID, "‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω!", markup)
}

func (h *BotHandler) findUserHandler(c telebot.Context) error {
	markup := &telebot.ReplyMarkup{}
	btnCancel := markup.Data("‚ìÇÔ∏è –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", "main_menu")
	markup.Inline(markup.Row(btnCancel))

	err := h.EditBotMessage(c.Chat().ID, "üîç –ü–æ–∏—Å–∫ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è.\n–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –∏–ª–∏ –§–ò–û –¥–ª—è –ø–æ–∏—Å–∫–∞", markup)
	if err != nil {
		return err
	}

	h.bot.Handle(telebot.OnText, func(ctx telebot.Context) error {
		btnRepeat := markup.Data("üîç –ù–∞–π—Ç–∏ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è", "find_user")
		markup.Inline(markup.Row(btnCancel, btnRepeat))
		input := ctx.Text()

		isPhoneNumber := validation.IsPhoneNumber(input)
		var users []models.BannedUser
		var err error

		if isPhoneNumber {
			normalizedPhone, errV := validation.ValidateAndNormalizePhone(input)
			if errV != nil {
				errMsg := fmt.Sprintf("‚ùå –û—à–∏–±–∫–∞: %s\n–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –µ—â–µ —Ä–∞–∑.", errV)
				return h.SendAndTrack(ctx.Recipient(), ctx.Chat().ID, errMsg)
			}
			users, err = h.db.FindBannedUserByPhone(normalizedPhone)
		} else {
			users, err = h.db.FindBannedUserByName(input)
		}

		if err != nil {
			return h.SendAndTrack(ctx.Recipient(), ctx.Chat().ID, "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è: "+err.Error(), markup)
		}

		if len(users) < 1 {
			var searchInput string
			if isPhoneNumber {
				searchInput = "–Ω–æ–º–µ—Ä–æ–º —Ç–µ–ª–µ—Ñ–æ–Ω–∞"
			} else {
				searchInput = "–§–ò–û"
			}

			msg := fmt.Sprintf("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å —Ç–∞–∫–∏–º %s –Ω–µ –Ω–∞–π–¥–µ–Ω", searchInput)
			return h.SendAndTrack(ctx.Recipient(), ctx.Chat().ID, msg, markup)
		}

		var usersBuilder strings.Builder
		for _, item := range users {
			usersBuilder.WriteString(fmt.Sprintf(
				"\n\n–§–ò–û: %s\n–û–ø–∏—Å–∞–Ω–∏–µ: %s\n–ì–æ—Ä–æ–¥: %s\n–§–æ—Ä–º–∞—Ç —à–∫–æ–ª—ã: %s",
				item.FullName, item.Description, item.City, item.SchoolFormat,
			))
		}
		usersStr := usersBuilder.String()

		return h.SendAndTrack(ctx.Recipient(), ctx.Chat().ID, fmt.Sprintf("üîç –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞–π–¥–µ–Ω!%s", usersStr), markup)
	})

	return nil
}
